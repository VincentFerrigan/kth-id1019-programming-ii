defmodule PPM do
  @moduledoc """
  A module for generating and writing PPM (Portable PixMap) image files.
  It allows the creation of image files by specifying pixel colors in RGB format.
  """

  @doc """
  Writes an image to a PPM file.

  ## Parameters

    - `name`: The name (including path) of the file to be written.
    - `image`: A list of rows, each row being a list of tuples `{R, G, B}` representing the color of each pixel.

  ## Examples

      iex> PPM.write("test.ppm", [[{:rgb, 255, 0, 0}, {:rgb, 0, 255, 0}, {:rgb, 0, 0, 255}]])
      :ok
  """
  @spec write(String.t(), list(list({atom(), integer(), integer(), integer()}))) :: :ok
  def write(name, image) do
    # The image is a list of rows, each row a list of
    # tuples {R,G,B}. The RGB values are 0-255.
    height = length(image)
    width = length(List.first(image))
    {:ok, fd} = File.open(name, [:write])
    IO.puts(fd, "P6")
    IO.puts(fd, "#generated by ppm.ex")
    IO.puts(fd, "#{width} #{height}")
    IO.puts(fd, "255")
    rows(image, fd)
    File.close(fd)
  end

  # Iterates over each row in the image data and writes the processed
  # color values to the file descriptor.
  defp rows(rows, fd) do
    Enum.each(rows, fn(r) ->
      colors = row(r)
      IO.write(fd, colors)
    end)
  end

  # Converts a row of RGB tuples into a flat list of binary data.
  # This function prepares the RGB values for each pixel to be written to the file.
  defp row(row) do
    List.foldr(row, [], fn({:rgb, r, g, b}, a) ->
      [r, g, b | a]
    end)
  end
end
